---
title: "Assignment 3"
author: "Jing Tao"
date: "Oct.8 2025"
format: "html"
---

## 1. Rerun murrell01.R

## a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.

```{r, fig.show='hold', fig.keep='last'}
x  <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, .8, .5, .45, .4, .3)
# Two y-values (y1 and y2) are measured at the same x positions.


par(las=1, mar=c(4, 4, 2, 4), cex=.7)
# las=1: makes axis labels horizontal.
# mar=c(4,4,2,4): sets plot margins (bottom, left, top, right).
# cex=.7: shrinks text/points to 70% of default.

plot.new()
plot.window(range(x), c(0, 6))
# plot.new() starts a blank plotting canvas.
# plot.window() defines x and y ranges (here, x from 0.5 to 16, y from 0 to 6).
# This gives full control over axes and layers.


lines(x, y1)
lines(x, y2)
#Adds connected lines for y1 and y2.

points(x, y1, pch=16, cex=2)                 # Try different cex?
points(x, y2, pch=21, bg="white", cex=2)     # Different background color
# y1 points: solid black circles (pch=16).
# y2 points: open circles with white fill (pch=21, bg="white").
# cex=2 makes them larger than default.

par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(0, 16, 4))                    # 1=bottom, 2=left, 3=top, 4=right
axis(2, at=seq(0, 6, 2))
axis(4, at=seq(0, 6, 2))
# All plot lines/axes drawn in gray.
# Adds bottom (1), left (2), and right (4) axes with custom tick marks.

box(bty="u")
mtext("Travel Time (s)",          side=1, line=2, cex=0.8)
mtext("Responses per Travel",     side=2, line=2, las=0, cex=0.8)
mtext("Responses per Second",     side=4, line=2, las=0, cex=0.8)
# box(bty="u"): draws a U-shaped frame (bottom + left + right, no top border).
# mtext(): adds axis labels outside the plot margins.

text(4, 5, "Bird 131")
# Places the text label “Bird 131” at coordinates (x=4, y=5).

par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")
# Resets margins and colors so later plots aren’t affected.
```

## 2. Rerun anscombe01.R (in Teams folder)

### Data Visualization

### Objective: Identify data or model problems using visualization

### Anscombe (1973) Quartlet

```{r}
data(anscombe)  # Load Anscombe's data
summary(anscombe)

## Simple version
plot(anscombe$x1,anscombe$y1)
summary(anscombe)

# Create four model objects
lm1 <- lm(y1 ~ x1, data=anscombe)
summary(lm1)
lm2 <- lm(y2 ~ x2, data=anscombe)
summary(lm2)
lm3 <- lm(y3 ~ x3, data=anscombe)
summary(lm3)
lm4 <- lm(y4 ~ x4, data=anscombe)
summary(lm4)
plot(anscombe$x1,anscombe$y1)
abline(coefficients(lm1))
plot(anscombe$x2,anscombe$y2)
abline(coefficients(lm2))
plot(anscombe$x3,anscombe$y3)
abline(coefficients(lm3))
plot(anscombe$x4,anscombe$y4)
abline(coefficients(lm4))


## Fancy version (per help file)

ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))

# Plot using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  ## or   ff[[2]] <- as.name(paste0("y", i))
  ##      ff[[3]] <- as.name(paste0("x", i))
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
  print(anova(lmi))
}

sapply(mods, coef)  # Note the use of this function
lapply(mods, function(fm) coef(summary(fm)))

# Preparing for the plots
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))

# Plot charts using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13))
  abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
```

### a. Compare the regression models

### Although the four regression models show nearly identical slopes, intercepts, and R² values, the actual data patterns behind them are very different. In the first dataset, the points follow a roughly linear pattern, so a straight-line model makes sense. In the second dataset, the relationship is curved, which breaks the linearity assumption. In the third dataset, one extreme point with high leverage has a strong influence on the line. In the fourth dataset, most points are clustered at the same x-value, and a single outlier determines the slope. This comparison shows that summary statistics alone can be misleading; visualizing the data is essential to detect problems like non-linearity, leverage, or outliers.

### b. Compare different ways to create the plots (e.g. changing colors, line types, plot characters)

```{r}
op <- par(mfrow = c(2,2), mar = 0.1 + c(4,4,1,1), oma = c(0,0,2,0))
pch_vec <- c(16, 17, 19, 21)  
col_pts <- c("black","firebrick","darkgreen","navy")
bg_pts  <- c(NA, NA, NA, "gold")  
ltys    <- c(1, 2, 3, 4)
lwds    <- c(2, 2, 2, 2)

for (i in 1:4) {
  xi <- anscombe[[paste0("x", i)]]
  yi <- anscombe[[paste0("y", i)]]
  mi <- lm(yi ~ xi)
  plot(xi, yi,
       pch = pch_vec[i], col = col_pts[i], bg = bg_pts[i],
       cex = 1.2, xlab = paste0("x", i), ylab = paste0("y", i))
  abline(mi, col = "dodgerblue3", lty = ltys[i], lwd = lwds[i])
  legend("topleft", inset = 0.02, bty = "n",
         legend = c("data", "OLS line"),
         pch = c(pch_vec[i], NA), pt.bg = c(bg_pts[i], NA),
         col = c(col_pts[i], "dodgerblue3"), lty = c(NA, ltys[i]), lwd = c(NA, lwds[i]))
}
mtext("Anscombe's 4 datasets — styled", outer = TRUE, cex = 1.4)
par(op)
```

### 3. Can you finetune the charts without using other packages (consult RGraphics by Murrell)?

### a. Use a serif font

```{r}
x  <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)

op <- par(no.readonly = TRUE)   
par(family = "serif", las = 1, mar = c(4,4,2,4), cex = 0.9)

plot.new()
plot.window(range(x), c(0, 6))

lines(x, y1, lwd = 2)
lines(x, y2, lwd = 2, lty = 2)

points(x, y1, pch = 19, cex = 1.5)
points(x, y2, pch = 21, cex = 1.5, bg = "white")

axis(1, at = seq(0, 16, 4))
axis(2, at = seq(0, 6, 2))
axis(4, at = seq(0, 6, 2))
box(bty = "u")

mtext("Travel Time (s)",      side = 1, line = 2)
mtext("Responses per Travel", side = 2, line = 2)
mtext("Responses per Second", side = 4, line = 2)

legend("topleft",
       legend = c("y1 (line)", "y2 (dashed)"),
       lty    = c(1, 2), lwd = 2,
       pch    = c(19, 21),
       pt.bg  = c(NA, "white"),
       bty = "n")

par(op)  

```

### b. Try non-default colors

```{r}
col1 <- "#355C7D"; col2 <- "#F67280"; grid_col <- "#99B898"

op <- par(no.readonly = TRUE)
par(family = "serif", las = 1, mar = c(4,4,2,4), cex = 0.9,
    col.axis = "gray30", col.lab = "gray10", fg = "gray30")

plot.new()
plot.window(range(x), c(0, 6))

abline(h = seq(0, 6, 1), v = seq(0, 16, 2), col = adjustcolor(grid_col, 0.4), lty = 3)

lines(x, y1, lwd = 2.2, col = col1, lty = 1)
lines(x, y2, lwd = 2.2, col = col2, lty = 2)

points(x, y1, pch = 19, cex = 1.6, col = col1)
points(x, y2, pch = 21, cex = 1.6, col = col2, bg = adjustcolor(col2, 0.3))

axis(1, at = seq(0, 16, 4))
axis(2, at = seq(0, 6,  2))
axis(4, at = seq(0, 6,  2))
box(bty = "u")

mtext("Travel Time (s)",      side = 1, line = 2)
mtext("Responses per Travel", side = 2, line = 2)
mtext("Responses per Second", side = 4, line = 2)

legend("topleft",
       legend = c("y1 (blue)", "y2 (pink)"),
       lty    = c(1, 2), lwd = 2.2,
       pch    = c(19, 21),
       pt.bg  = c(NA, adjustcolor(col2, 0.3)),
       col    = c(col1, col2),
       bty = "n")

par(op)
```

### c. Use own plotting character

```{r}
op <- par(family = "serif", mar = c(4, 4, 1, 1), las = 1, cex = 0.95,
          col.axis = "gray30", fg = "gray25")

x  <- c(0.5, 2, 4, 8, 12, 16)
y1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)
y2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)

plot.new()
plot.window(xlim = range(x), ylim = c(0, 6))
axis(1, at = seq(0, 16, 4))
axis(2, at = 0:6)
box(bty = "l")

points(x, y1, pch = 8,  col = "#2B6CB0", cex = 1.6, lwd = 1.2)  # blue star
points(x, y2, pch = 18, col = "#E53E3E", cex = 1.3)             # red diamond

mtext("Travel Time (s)", side = 1, line = 2.2)
mtext("Responses",       side = 2, line = 2.2)
legend("topleft",
       legend = c("y1: star", "y2: diamond"),
       pch = c(8, 18), col = c("#2B6CB0", "#E53E3E"),
       pt.cex = c(1.6, 1.3), bty = "n")

par(op)

```

### 4. How about with ggplot2? (use tidyverse package)

```{r}

library(tidyverse)

dat_long <- datasets::anscombe |>
  as_tibble() |>
  mutate(row = row_number()) |>
  pivot_longer(
    cols = -row,
    names_to = c(".value", "set"),
    names_pattern = "([xy])(\\d)"
  ) |>
  mutate(set = factor(set, levels = c("1","2","3","4")))

ggplot(dat_long, aes(x = x, y = y)) +
  geom_point(shape = 21, size = 2.8, stroke = 0.6,
             fill = "#FFA54C", color = "#333333") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.1, color = "#2C7BE5") +
  facet_wrap(~ set, ncol = 2) +
  labs(
    title = "Anscombe's ggplot",
    x = "x", y = "y",
    caption = "Data: datasets::anscombe"
  ) +
  theme_minimal(base_family = "serif") +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 11),
    panel.grid.minor = element_blank()
  )

```

### 5. Pre-hackathon by team:

### a. Team work: Replicate the Scatterplot matrix below (hint: Acquire data using the following codes)

```{r}
library(tidyverse)

owidall <- read.csv("https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv")
owidall <- owidall[!grepl("^OWID", owidall$iso_code), ]
owideu  <- subset(owidall, continent == "Europe")

owideu$date <- as.Date(owideu$date)

ggplot(owideu, aes(x = date, y = new_deaths, color = location)) +
  geom_point(size = 0.7, alpha = 0.7) +
  labs(x = "Date", y = "COVID Deaths in Europe (Daily)") +
  theme_minimal()
```

```{r}
library(tidyverse)
library(GGally)

owidall <- read.csv("https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv")
owidall <- owidall[!grepl("^OWID", owidall$iso_code), ]
owideu  <- subset(owidall, continent == "Europe")

eu_latest <- owideu %>%
  group_by(location) %>%
  slice_tail(n = 1) %>%
  ungroup()

vars <- c("total_cases_per_million",
          "total_deaths_per_million",
          "gdp_per_capita",
          "life_expectancy")

eu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()

eu_plot <- eu_plot %>%
  mutate(across(c(total_cases_per_million,
                  total_deaths_per_million,
                  gdp_per_capita), log1p))

colnames(eu_plot) <- c("Cases(log)", "Deaths(log)", "GDPpc(log)", "LifeExp")

ggpairs(eu_plot,
        title = "Scatterplot Matrix (Europe, log)",
        lower = list(continuous = wrap("points", alpha = 0.7, size = 1.5)),
        diag  = list(continuous = wrap("densityDiag", alpha = 0.5)))
```

```{r}
library(tidyverse)
library(GGally)
library(scales)

options(scipen = 999)  

owidall <- read.csv("https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv")
owidall <- owidall[!grepl("^OWID", owidall$iso_code), ]
owideu  <- subset(owidall, continent == "Europe")

eu_latest <- owideu %>%
  group_by(location) %>%
  slice_tail(n = 1) %>%
  ungroup()

vars <- c("total_cases_per_million",
          "total_deaths_per_million",
          "gdp_per_capita",
          "life_expectancy")

eu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()
colnames(eu_plot) <- c("Cases/mil", "Deaths/mil", "GDPpc", "LifeExp")

my_points <- function(data, mapping, ...){
  ggplot(data = data, mapping = mapping) +
    geom_point(alpha = 0.7, size = 1.5) +
    scale_x_continuous(labels = label_number(big.mark = ","), breaks = pretty_breaks(3)) +
    scale_y_continuous(labels = label_number(big.mark = ","), breaks = pretty_breaks(3))
}
my_hist <- function(data, mapping, ...){
  ggplot(data = data, mapping = mapping) +
    geom_histogram(bins = 20, fill = "grey70", color = "white") +
    scale_x_continuous(labels = label_number(big.mark = ","), breaks = pretty_breaks(3))
}

ggpairs(
  eu_plot,
  lower = list(continuous = my_points),
  diag  = list(continuous = my_hist),
  upper = list(continuous = wrap("cor", size = 4)),
  title = "Scatterplot Matrix (Europe)"
)
```

### b. Send the codes to the TA. The first team delivering the code and chart will win a prize (by time stamp and product)

```{r}
file.exists("A3.html")
list.files(c(".", "_site", "docs"), pattern = "A3\\.html", recursive = TRUE)
```

```{r}
file.rename("Jing-Tao/A3.html", "A3.html")
if (dir.exists("Jing-Tao/A3_files")) {
  file.rename("Jing-Tao/A3_files", "A3_files")
}
```