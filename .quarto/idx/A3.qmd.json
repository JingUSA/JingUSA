{"title":"Assignment 3","markdown":{"yaml":{"title":"Assignment 3","author":"Jing Tao","date":"Oct.8 2025","format":"html"},"headingText":"1. Rerun murrell01.R","containsRefs":false,"markdown":"\n\n\n## a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.\n\n```{r, fig.show='hold', fig.keep='last'}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, .8, .5, .45, .4, .3)\n# Two y-values (y1 and y2) are measured at the same x positions.\n\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7)\n# las=1: makes axis labels horizontal.\n# mar=c(4,4,2,4): sets plot margins (bottom, left, top, right).\n# cex=.7: shrinks text/points to 70% of default.\n\nplot.new()\nplot.window(range(x), c(0, 6))\n# plot.new() starts a blank plotting canvas.\n# plot.window() defines x and y ranges (here, x from 0.5 to 16, y from 0 to 6).\n# This gives full control over axes and layers.\n\n\nlines(x, y1)\nlines(x, y2)\n#Adds connected lines for y1 and y2.\n\npoints(x, y1, pch=16, cex=2)                 # Try different cex?\npoints(x, y2, pch=21, bg=\"white\", cex=2)     # Different background color\n# y1 points: solid black circles (pch=16).\n# y2 points: open circles with white fill (pch=21, bg=\"white\").\n# cex=2 makes them larger than default.\n\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4))                    # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\n# All plot lines/axes drawn in gray.\n# Adds bottom (1), left (2), and right (4) axes with custom tick marks.\n\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\",          side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\",     side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\",     side=4, line=2, las=0, cex=0.8)\n# box(bty=\"u\"): draws a U-shaped frame (bottom + left + right, no top border).\n# mtext(): adds axis labels outside the plot margins.\n\ntext(4, 5, \"Bird 131\")\n# Places the text label “Bird 131” at coordinates (x=4, y=5).\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n# Resets margins and colors so later plots aren’t affected.\n```\n\n## 2. Rerun anscombe01.R (in Teams folder)\n\n### Data Visualization\n\n### Objective: Identify data or model problems using visualization\n\n### Anscombe (1973) Quartlet\n\n```{r}\ndata(anscombe)  # Load Anscombe's data\nsummary(anscombe)\n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n# Create four model objects\nlm1 <- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\nlm3 <- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\nlm4 <- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n## Fancy version (per help file)\n\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nsapply(mods, coef)  # Note the use of this function\nlapply(mods, function(fm) coef(summary(fm)))\n\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\npar(op)\n```\n\n### a. Compare the regression models\n\n### Although the four regression models show nearly identical slopes, intercepts, and R² values, the actual data patterns behind them are very different. In the first dataset, the points follow a roughly linear pattern, so a straight-line model makes sense. In the second dataset, the relationship is curved, which breaks the linearity assumption. In the third dataset, one extreme point with high leverage has a strong influence on the line. In the fourth dataset, most points are clustered at the same x-value, and a single outlier determines the slope. This comparison shows that summary statistics alone can be misleading; visualizing the data is essential to detect problems like non-linearity, leverage, or outliers.\n\n### b. Compare different ways to create the plots (e.g. changing colors, line types, plot characters)\n\n```{r}\nop <- par(mfrow = c(2,2), mar = 0.1 + c(4,4,1,1), oma = c(0,0,2,0))\npch_vec <- c(16, 17, 19, 21)  \ncol_pts <- c(\"black\",\"firebrick\",\"darkgreen\",\"navy\")\nbg_pts  <- c(NA, NA, NA, \"gold\")  \nltys    <- c(1, 2, 3, 4)\nlwds    <- c(2, 2, 2, 2)\n\nfor (i in 1:4) {\n  xi <- anscombe[[paste0(\"x\", i)]]\n  yi <- anscombe[[paste0(\"y\", i)]]\n  mi <- lm(yi ~ xi)\n  plot(xi, yi,\n       pch = pch_vec[i], col = col_pts[i], bg = bg_pts[i],\n       cex = 1.2, xlab = paste0(\"x\", i), ylab = paste0(\"y\", i))\n  abline(mi, col = \"dodgerblue3\", lty = ltys[i], lwd = lwds[i])\n  legend(\"topleft\", inset = 0.02, bty = \"n\",\n         legend = c(\"data\", \"OLS line\"),\n         pch = c(pch_vec[i], NA), pt.bg = c(bg_pts[i], NA),\n         col = c(col_pts[i], \"dodgerblue3\"), lty = c(NA, ltys[i]), lwd = c(NA, lwds[i]))\n}\nmtext(\"Anscombe's 4 datasets — styled\", outer = TRUE, cex = 1.4)\npar(op)\n```\n\n### 3. Can you finetune the charts without using other packages (consult RGraphics by Murrell)?\n\n### a. Use a serif font\n\n```{r}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nop <- par(no.readonly = TRUE)   \npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1, lwd = 2)\nlines(x, y2, lwd = 2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.5)\npoints(x, y2, pch = 21, cex = 1.5, bg = \"white\")\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (line)\", \"y2 (dashed)\"),\n       lty    = c(1, 2), lwd = 2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, \"white\"),\n       bty = \"n\")\n\npar(op)  \n\n```\n\n### b. Try non-default colors\n\n```{r}\ncol1 <- \"#355C7D\"; col2 <- \"#F67280\"; grid_col <- \"#99B898\"\n\nop <- par(no.readonly = TRUE)\npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9,\n    col.axis = \"gray30\", col.lab = \"gray10\", fg = \"gray30\")\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nabline(h = seq(0, 6, 1), v = seq(0, 16, 2), col = adjustcolor(grid_col, 0.4), lty = 3)\n\nlines(x, y1, lwd = 2.2, col = col1, lty = 1)\nlines(x, y2, lwd = 2.2, col = col2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.6, col = col1)\npoints(x, y2, pch = 21, cex = 1.6, col = col2, bg = adjustcolor(col2, 0.3))\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6,  2))\naxis(4, at = seq(0, 6,  2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (blue)\", \"y2 (pink)\"),\n       lty    = c(1, 2), lwd = 2.2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, adjustcolor(col2, 0.3)),\n       col    = c(col1, col2),\n       bty = \"n\")\n\npar(op)\n```\n\n### c. Use own plotting character\n\n```{r}\nop <- par(family = \"serif\", mar = c(4, 4, 1, 1), las = 1, cex = 0.95,\n          col.axis = \"gray30\", fg = \"gray25\")\n\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nplot.new()\nplot.window(xlim = range(x), ylim = c(0, 6))\naxis(1, at = seq(0, 16, 4))\naxis(2, at = 0:6)\nbox(bty = \"l\")\n\npoints(x, y1, pch = 8,  col = \"#2B6CB0\", cex = 1.6, lwd = 1.2)  # blue star\npoints(x, y2, pch = 18, col = \"#E53E3E\", cex = 1.3)             # red diamond\n\nmtext(\"Travel Time (s)\", side = 1, line = 2.2)\nmtext(\"Responses\",       side = 2, line = 2.2)\nlegend(\"topleft\",\n       legend = c(\"y1: star\", \"y2: diamond\"),\n       pch = c(8, 18), col = c(\"#2B6CB0\", \"#E53E3E\"),\n       pt.cex = c(1.6, 1.3), bty = \"n\")\n\npar(op)\n\n```\n\n### 4. How about with ggplot2? (use tidyverse package)\n\n```{r}\n\nlibrary(tidyverse)\n\ndat_long <- datasets::anscombe |>\n  as_tibble() |>\n  mutate(row = row_number()) |>\n  pivot_longer(\n    cols = -row,\n    names_to = c(\".value\", \"set\"),\n    names_pattern = \"([xy])(\\\\d)\"\n  ) |>\n  mutate(set = factor(set, levels = c(\"1\",\"2\",\"3\",\"4\")))\n\nggplot(dat_long, aes(x = x, y = y)) +\n  geom_point(shape = 21, size = 2.8, stroke = 0.6,\n             fill = \"#FFA54C\", color = \"#333333\") +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.1, color = \"#2C7BE5\") +\n  facet_wrap(~ set, ncol = 2) +\n  labs(\n    title = \"Anscombe's ggplot\",\n    x = \"x\", y = \"y\",\n    caption = \"Data: datasets::anscombe\"\n  ) +\n  theme_minimal(base_family = \"serif\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank()\n  )\n\n```\n\n### 5. Pre-hackathon by team:\n\n### a. Team work: Replicate the Scatterplot matrix below (hint: Acquire data using the following codes)\n\n```{r}\nlibrary(tidyverse)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\nowideu$date <- as.Date(owideu$date)\n\nggplot(owideu, aes(x = date, y = new_deaths, color = location)) +\n  geom_point(size = 0.7, alpha = 0.7) +\n  labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(GGally)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\n\neu_plot <- eu_plot %>%\n  mutate(across(c(total_cases_per_million,\n                  total_deaths_per_million,\n                  gdp_per_capita), log1p))\n\ncolnames(eu_plot) <- c(\"Cases(log)\", \"Deaths(log)\", \"GDPpc(log)\", \"LifeExp\")\n\nggpairs(eu_plot,\n        title = \"Scatterplot Matrix (Europe, log)\",\n        lower = list(continuous = wrap(\"points\", alpha = 0.7, size = 1.5)),\n        diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5)))\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(scales)\n\noptions(scipen = 999)  \n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\ncolnames(eu_plot) <- c(\"Cases/mil\", \"Deaths/mil\", \"GDPpc\", \"LifeExp\")\n\nmy_points <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.7, size = 1.5) +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3)) +\n    scale_y_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\nmy_hist <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_histogram(bins = 20, fill = \"grey70\", color = \"white\") +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\n\nggpairs(\n  eu_plot,\n  lower = list(continuous = my_points),\n  diag  = list(continuous = my_hist),\n  upper = list(continuous = wrap(\"cor\", size = 4)),\n  title = \"Scatterplot Matrix (Europe)\"\n)\n```\n\n### b. Send the codes to the TA. The first team delivering the code and chart will win a prize (by time stamp and product)\n\n```{r}\nfile.exists(\"A3.html\")\nlist.files(c(\".\", \"_site\", \"docs\"), pattern = \"A3\\\\.html\", recursive = TRUE)\n```\n\n```{r}\nfile.rename(\"Jing-Tao/A3.html\", \"A3.html\")\nif (dir.exists(\"Jing-Tao/A3_files\")) {\n  file.rename(\"Jing-Tao/A3_files\", \"A3_files\")\n}\n```","srcMarkdownNoYaml":"\n\n## 1. Rerun murrell01.R\n\n## a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.\n\n```{r, fig.show='hold', fig.keep='last'}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, .8, .5, .45, .4, .3)\n# Two y-values (y1 and y2) are measured at the same x positions.\n\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7)\n# las=1: makes axis labels horizontal.\n# mar=c(4,4,2,4): sets plot margins (bottom, left, top, right).\n# cex=.7: shrinks text/points to 70% of default.\n\nplot.new()\nplot.window(range(x), c(0, 6))\n# plot.new() starts a blank plotting canvas.\n# plot.window() defines x and y ranges (here, x from 0.5 to 16, y from 0 to 6).\n# This gives full control over axes and layers.\n\n\nlines(x, y1)\nlines(x, y2)\n#Adds connected lines for y1 and y2.\n\npoints(x, y1, pch=16, cex=2)                 # Try different cex?\npoints(x, y2, pch=21, bg=\"white\", cex=2)     # Different background color\n# y1 points: solid black circles (pch=16).\n# y2 points: open circles with white fill (pch=21, bg=\"white\").\n# cex=2 makes them larger than default.\n\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4))                    # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\n# All plot lines/axes drawn in gray.\n# Adds bottom (1), left (2), and right (4) axes with custom tick marks.\n\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\",          side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\",     side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\",     side=4, line=2, las=0, cex=0.8)\n# box(bty=\"u\"): draws a U-shaped frame (bottom + left + right, no top border).\n# mtext(): adds axis labels outside the plot margins.\n\ntext(4, 5, \"Bird 131\")\n# Places the text label “Bird 131” at coordinates (x=4, y=5).\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n# Resets margins and colors so later plots aren’t affected.\n```\n\n## 2. Rerun anscombe01.R (in Teams folder)\n\n### Data Visualization\n\n### Objective: Identify data or model problems using visualization\n\n### Anscombe (1973) Quartlet\n\n```{r}\ndata(anscombe)  # Load Anscombe's data\nsummary(anscombe)\n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n# Create four model objects\nlm1 <- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\nlm3 <- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\nlm4 <- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n## Fancy version (per help file)\n\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nsapply(mods, coef)  # Note the use of this function\nlapply(mods, function(fm) coef(summary(fm)))\n\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\npar(op)\n```\n\n### a. Compare the regression models\n\n### Although the four regression models show nearly identical slopes, intercepts, and R² values, the actual data patterns behind them are very different. In the first dataset, the points follow a roughly linear pattern, so a straight-line model makes sense. In the second dataset, the relationship is curved, which breaks the linearity assumption. In the third dataset, one extreme point with high leverage has a strong influence on the line. In the fourth dataset, most points are clustered at the same x-value, and a single outlier determines the slope. This comparison shows that summary statistics alone can be misleading; visualizing the data is essential to detect problems like non-linearity, leverage, or outliers.\n\n### b. Compare different ways to create the plots (e.g. changing colors, line types, plot characters)\n\n```{r}\nop <- par(mfrow = c(2,2), mar = 0.1 + c(4,4,1,1), oma = c(0,0,2,0))\npch_vec <- c(16, 17, 19, 21)  \ncol_pts <- c(\"black\",\"firebrick\",\"darkgreen\",\"navy\")\nbg_pts  <- c(NA, NA, NA, \"gold\")  \nltys    <- c(1, 2, 3, 4)\nlwds    <- c(2, 2, 2, 2)\n\nfor (i in 1:4) {\n  xi <- anscombe[[paste0(\"x\", i)]]\n  yi <- anscombe[[paste0(\"y\", i)]]\n  mi <- lm(yi ~ xi)\n  plot(xi, yi,\n       pch = pch_vec[i], col = col_pts[i], bg = bg_pts[i],\n       cex = 1.2, xlab = paste0(\"x\", i), ylab = paste0(\"y\", i))\n  abline(mi, col = \"dodgerblue3\", lty = ltys[i], lwd = lwds[i])\n  legend(\"topleft\", inset = 0.02, bty = \"n\",\n         legend = c(\"data\", \"OLS line\"),\n         pch = c(pch_vec[i], NA), pt.bg = c(bg_pts[i], NA),\n         col = c(col_pts[i], \"dodgerblue3\"), lty = c(NA, ltys[i]), lwd = c(NA, lwds[i]))\n}\nmtext(\"Anscombe's 4 datasets — styled\", outer = TRUE, cex = 1.4)\npar(op)\n```\n\n### 3. Can you finetune the charts without using other packages (consult RGraphics by Murrell)?\n\n### a. Use a serif font\n\n```{r}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nop <- par(no.readonly = TRUE)   \npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1, lwd = 2)\nlines(x, y2, lwd = 2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.5)\npoints(x, y2, pch = 21, cex = 1.5, bg = \"white\")\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (line)\", \"y2 (dashed)\"),\n       lty    = c(1, 2), lwd = 2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, \"white\"),\n       bty = \"n\")\n\npar(op)  \n\n```\n\n### b. Try non-default colors\n\n```{r}\ncol1 <- \"#355C7D\"; col2 <- \"#F67280\"; grid_col <- \"#99B898\"\n\nop <- par(no.readonly = TRUE)\npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9,\n    col.axis = \"gray30\", col.lab = \"gray10\", fg = \"gray30\")\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nabline(h = seq(0, 6, 1), v = seq(0, 16, 2), col = adjustcolor(grid_col, 0.4), lty = 3)\n\nlines(x, y1, lwd = 2.2, col = col1, lty = 1)\nlines(x, y2, lwd = 2.2, col = col2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.6, col = col1)\npoints(x, y2, pch = 21, cex = 1.6, col = col2, bg = adjustcolor(col2, 0.3))\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6,  2))\naxis(4, at = seq(0, 6,  2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (blue)\", \"y2 (pink)\"),\n       lty    = c(1, 2), lwd = 2.2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, adjustcolor(col2, 0.3)),\n       col    = c(col1, col2),\n       bty = \"n\")\n\npar(op)\n```\n\n### c. Use own plotting character\n\n```{r}\nop <- par(family = \"serif\", mar = c(4, 4, 1, 1), las = 1, cex = 0.95,\n          col.axis = \"gray30\", fg = \"gray25\")\n\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nplot.new()\nplot.window(xlim = range(x), ylim = c(0, 6))\naxis(1, at = seq(0, 16, 4))\naxis(2, at = 0:6)\nbox(bty = \"l\")\n\npoints(x, y1, pch = 8,  col = \"#2B6CB0\", cex = 1.6, lwd = 1.2)  # blue star\npoints(x, y2, pch = 18, col = \"#E53E3E\", cex = 1.3)             # red diamond\n\nmtext(\"Travel Time (s)\", side = 1, line = 2.2)\nmtext(\"Responses\",       side = 2, line = 2.2)\nlegend(\"topleft\",\n       legend = c(\"y1: star\", \"y2: diamond\"),\n       pch = c(8, 18), col = c(\"#2B6CB0\", \"#E53E3E\"),\n       pt.cex = c(1.6, 1.3), bty = \"n\")\n\npar(op)\n\n```\n\n### 4. How about with ggplot2? (use tidyverse package)\n\n```{r}\n\nlibrary(tidyverse)\n\ndat_long <- datasets::anscombe |>\n  as_tibble() |>\n  mutate(row = row_number()) |>\n  pivot_longer(\n    cols = -row,\n    names_to = c(\".value\", \"set\"),\n    names_pattern = \"([xy])(\\\\d)\"\n  ) |>\n  mutate(set = factor(set, levels = c(\"1\",\"2\",\"3\",\"4\")))\n\nggplot(dat_long, aes(x = x, y = y)) +\n  geom_point(shape = 21, size = 2.8, stroke = 0.6,\n             fill = \"#FFA54C\", color = \"#333333\") +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.1, color = \"#2C7BE5\") +\n  facet_wrap(~ set, ncol = 2) +\n  labs(\n    title = \"Anscombe's ggplot\",\n    x = \"x\", y = \"y\",\n    caption = \"Data: datasets::anscombe\"\n  ) +\n  theme_minimal(base_family = \"serif\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank()\n  )\n\n```\n\n### 5. Pre-hackathon by team:\n\n### a. Team work: Replicate the Scatterplot matrix below (hint: Acquire data using the following codes)\n\n```{r}\nlibrary(tidyverse)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\nowideu$date <- as.Date(owideu$date)\n\nggplot(owideu, aes(x = date, y = new_deaths, color = location)) +\n  geom_point(size = 0.7, alpha = 0.7) +\n  labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n  theme_minimal()\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(GGally)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\n\neu_plot <- eu_plot %>%\n  mutate(across(c(total_cases_per_million,\n                  total_deaths_per_million,\n                  gdp_per_capita), log1p))\n\ncolnames(eu_plot) <- c(\"Cases(log)\", \"Deaths(log)\", \"GDPpc(log)\", \"LifeExp\")\n\nggpairs(eu_plot,\n        title = \"Scatterplot Matrix (Europe, log)\",\n        lower = list(continuous = wrap(\"points\", alpha = 0.7, size = 1.5)),\n        diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5)))\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(scales)\n\noptions(scipen = 999)  \n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\ncolnames(eu_plot) <- c(\"Cases/mil\", \"Deaths/mil\", \"GDPpc\", \"LifeExp\")\n\nmy_points <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.7, size = 1.5) +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3)) +\n    scale_y_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\nmy_hist <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_histogram(bins = 20, fill = \"grey70\", color = \"white\") +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\n\nggpairs(\n  eu_plot,\n  lower = list(continuous = my_points),\n  diag  = list(continuous = my_hist),\n  upper = list(continuous = wrap(\"cor\", size = 4)),\n  title = \"Scatterplot Matrix (Europe)\"\n)\n```\n\n### b. Send the codes to the TA. The first team delivering the code and chart will win a prize (by time stamp and product)\n\n```{r}\nfile.exists(\"A3.html\")\nlist.files(c(\".\", \"_site\", \"docs\"), pattern = \"A3\\\\.html\", recursive = TRUE)\n```\n\n```{r}\nfile.rename(\"Jing-Tao/A3.html\", \"A3.html\")\nif (dir.exists(\"Jing-Tao/A3_files\")) {\n  file.rename(\"Jing-Tao/A3_files\", \"A3_files\")\n}\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"A3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"default","title":"Assignment 3","author":"Jing Tao","date":"Oct.8 2025"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}