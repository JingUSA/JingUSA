{
  "hash": "aac369c36787f4e7137f98abd560f6b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 3\"\nauthor: \"Jing Tao\"\ndate: \"Oct.8 2025\"\nformat: \"html\"\n---\n\n\n\n\n## 1. Rerun murrell01.R\n\n## a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, .8, .5, .45, .4, .3)\n# Two y-values (y1 and y2) are measured at the same x positions.\n\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7)\n# las=1: makes axis labels horizontal.\n# mar=c(4,4,2,4): sets plot margins (bottom, left, top, right).\n# cex=.7: shrinks text/points to 70% of default.\n\nplot.new()\nplot.window(range(x), c(0, 6))\n# plot.new() starts a blank plotting canvas.\n# plot.window() defines x and y ranges (here, x from 0.5 to 16, y from 0 to 6).\n# This gives full control over axes and layers.\n\n\nlines(x, y1)\nlines(x, y2)\n#Adds connected lines for y1 and y2.\n\npoints(x, y1, pch=16, cex=2)                 # Try different cex?\npoints(x, y2, pch=21, bg=\"white\", cex=2)     # Different background color\n# y1 points: solid black circles (pch=16).\n# y2 points: open circles with white fill (pch=21, bg=\"white\").\n# cex=2 makes them larger than default.\n\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4))                    # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\n# All plot lines/axes drawn in gray.\n# Adds bottom (1), left (2), and right (4) axes with custom tick marks.\n\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\",          side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\",     side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\",     side=4, line=2, las=0, cex=0.8)\n# box(bty=\"u\"): draws a U-shaped frame (bottom + left + right, no top border).\n# mtext(): adds axis labels outside the plot margins.\n\ntext(4, 5, \"Bird 131\")\n# Places the text label “Bird 131” at coordinates (x=4, y=5).\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n# Resets margins and colors so later plots aren’t affected.\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n## 2. Rerun anscombe01.R (in Teams folder)\n\n### Data Visualization\n\n### Objective: Identify data or model problems using visualization\n\n### Anscombe (1973) Quartlet\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(anscombe)  # Load Anscombe's data\nsummary(anscombe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n```\n\n\n:::\n\n```{.r .cell-code}\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Create four model objects\nlm1 <- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,\tAdjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n```\n\n\n:::\n\n```{.r .cell-code}\nlm2 <- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n```\n\n\n:::\n\n```{.r .cell-code}\nlm3 <- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,\tAdjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n```\n\n\n:::\n\n```{.r .cell-code}\nlm4 <- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,\tAdjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-2-4.png){width=672}\n:::\n\n```{.r .cell-code}\n## Fancy version (per help file)\n\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(>F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nsapply(mods, coef)  # Note the use of this function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n```\n\n\n:::\n\n```{.r .cell-code}\nlapply(mods, function(fm) coef(summary(fm)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$lm1\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n```\n\n\n:::\n\n```{.r .cell-code}\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-2-5.png){width=672}\n:::\n\n```{.r .cell-code}\npar(op)\n```\n:::\n\n\n\n\n### a. Compare the regression models\n\n### Although the four regression models show nearly identical slopes, intercepts, and R² values, the actual data patterns behind them are very different. In the first dataset, the points follow a roughly linear pattern, so a straight-line model makes sense. In the second dataset, the relationship is curved, which breaks the linearity assumption. In the third dataset, one extreme point with high leverage has a strong influence on the line. In the fourth dataset, most points are clustered at the same x-value, and a single outlier determines the slope. This comparison shows that summary statistics alone can be misleading; visualizing the data is essential to detect problems like non-linearity, leverage, or outliers.\n\n### b. Compare different ways to create the plots (e.g. changing colors, line types, plot characters)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nop <- par(mfrow = c(2,2), mar = 0.1 + c(4,4,1,1), oma = c(0,0,2,0))\npch_vec <- c(16, 17, 19, 21)  \ncol_pts <- c(\"black\",\"firebrick\",\"darkgreen\",\"navy\")\nbg_pts  <- c(NA, NA, NA, \"gold\")  \nltys    <- c(1, 2, 3, 4)\nlwds    <- c(2, 2, 2, 2)\n\nfor (i in 1:4) {\n  xi <- anscombe[[paste0(\"x\", i)]]\n  yi <- anscombe[[paste0(\"y\", i)]]\n  mi <- lm(yi ~ xi)\n  plot(xi, yi,\n       pch = pch_vec[i], col = col_pts[i], bg = bg_pts[i],\n       cex = 1.2, xlab = paste0(\"x\", i), ylab = paste0(\"y\", i))\n  abline(mi, col = \"dodgerblue3\", lty = ltys[i], lwd = lwds[i])\n  legend(\"topleft\", inset = 0.02, bty = \"n\",\n         legend = c(\"data\", \"OLS line\"),\n         pch = c(pch_vec[i], NA), pt.bg = c(bg_pts[i], NA),\n         col = c(col_pts[i], \"dodgerblue3\"), lty = c(NA, ltys[i]), lwd = c(NA, lwds[i]))\n}\nmtext(\"Anscombe's 4 datasets — styled\", outer = TRUE, cex = 1.4)\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(op)\n```\n:::\n\n\n\n\n### 3. Can you finetune the charts without using other packages (consult RGraphics by Murrell)?\n\n### a. Use a serif font\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nop <- par(no.readonly = TRUE)   \npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1, lwd = 2)\nlines(x, y2, lwd = 2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.5)\npoints(x, y2, pch = 21, cex = 1.5, bg = \"white\")\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (line)\", \"y2 (dashed)\"),\n       lty    = c(1, 2), lwd = 2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, \"white\"),\n       bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(op)  \n```\n:::\n\n\n\n\n### b. Try non-default colors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol1 <- \"#355C7D\"; col2 <- \"#F67280\"; grid_col <- \"#99B898\"\n\nop <- par(no.readonly = TRUE)\npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9,\n    col.axis = \"gray30\", col.lab = \"gray10\", fg = \"gray30\")\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nabline(h = seq(0, 6, 1), v = seq(0, 16, 2), col = adjustcolor(grid_col, 0.4), lty = 3)\n\nlines(x, y1, lwd = 2.2, col = col1, lty = 1)\nlines(x, y2, lwd = 2.2, col = col2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.6, col = col1)\npoints(x, y2, pch = 21, cex = 1.6, col = col2, bg = adjustcolor(col2, 0.3))\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6,  2))\naxis(4, at = seq(0, 6,  2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (blue)\", \"y2 (pink)\"),\n       lty    = c(1, 2), lwd = 2.2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, adjustcolor(col2, 0.3)),\n       col    = c(col1, col2),\n       bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(op)\n```\n:::\n\n\n\n\n### c. Use own plotting character\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nop <- par(family = \"serif\", mar = c(4, 4, 1, 1), las = 1, cex = 0.95,\n          col.axis = \"gray30\", fg = \"gray25\")\n\nx  <- c(0.5, 2, 4, 8, 12, 16)\ny1 <- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 <- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nplot.new()\nplot.window(xlim = range(x), ylim = c(0, 6))\naxis(1, at = seq(0, 16, 4))\naxis(2, at = 0:6)\nbox(bty = \"l\")\n\npoints(x, y1, pch = 8,  col = \"#2B6CB0\", cex = 1.6, lwd = 1.2)  # blue star\npoints(x, y2, pch = 18, col = \"#E53E3E\", cex = 1.3)             # red diamond\n\nmtext(\"Travel Time (s)\", side = 1, line = 2.2)\nmtext(\"Responses\",       side = 2, line = 2.2)\nlegend(\"topleft\",\n       legend = c(\"y1: star\", \"y2: diamond\"),\n       pch = c(8, 18), col = c(\"#2B6CB0\", \"#E53E3E\"),\n       pt.cex = c(1.6, 1.3), bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(op)\n```\n:::\n\n\n\n\n### 4. How about with ggplot2? (use tidyverse package)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ndat_long <- datasets::anscombe |>\n  as_tibble() |>\n  mutate(row = row_number()) |>\n  pivot_longer(\n    cols = -row,\n    names_to = c(\".value\", \"set\"),\n    names_pattern = \"([xy])(\\\\d)\"\n  ) |>\n  mutate(set = factor(set, levels = c(\"1\",\"2\",\"3\",\"4\")))\n\nggplot(dat_long, aes(x = x, y = y)) +\n  geom_point(shape = 21, size = 2.8, stroke = 0.6,\n             fill = \"#FFA54C\", color = \"#333333\") +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.1, color = \"#2C7BE5\") +\n  facet_wrap(~ set, ncol = 2) +\n  labs(\n    title = \"Anscombe's ggplot\",\n    x = \"x\", y = \"y\",\n    caption = \"Data: datasets::anscombe\"\n  ) +\n  theme_minimal(base_family = \"serif\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank()\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5. Pre-hackathon by team:\n\n### a. Team work: Replicate the Scatterplot matrix below (hint: Acquire data using the following codes)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\nowideu$date <- as.Date(owideu$date)\n\nggplot(owideu, aes(x = date, y = new_deaths, color = location)) +\n  geom_point(size = 0.7, alpha = 0.7) +\n  labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1607 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(GGally)\n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\n\neu_plot <- eu_plot %>%\n  mutate(across(c(total_cases_per_million,\n                  total_deaths_per_million,\n                  gdp_per_capita), log1p))\n\ncolnames(eu_plot) <- c(\"Cases(log)\", \"Deaths(log)\", \"GDPpc(log)\", \"LifeExp\")\n\nggpairs(eu_plot,\n        title = \"Scatterplot Matrix (Europe, log)\",\n        lower = list(continuous = wrap(\"points\", alpha = 0.7, size = 1.5)),\n        diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5)))\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:purrr':\n\n    discard\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n```{.r .cell-code}\noptions(scipen = 999)  \n\nowidall <- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall <- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  <- subset(owidall, continent == \"Europe\")\n\neu_latest <- owideu %>%\n  group_by(location) %>%\n  slice_tail(n = 1) %>%\n  ungroup()\n\nvars <- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot <- eu_latest %>% select(all_of(vars)) %>% drop_na()\ncolnames(eu_plot) <- c(\"Cases/mil\", \"Deaths/mil\", \"GDPpc\", \"LifeExp\")\n\nmy_points <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.7, size = 1.5) +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3)) +\n    scale_y_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\nmy_hist <- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_histogram(bins = 20, fill = \"grey70\", color = \"white\") +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\n\nggpairs(\n  eu_plot,\n  lower = list(continuous = my_points),\n  diag  = list(continuous = my_hist),\n  upper = list(continuous = wrap(\"cor\", size = 4)),\n  title = \"Scatterplot Matrix (Europe)\"\n)\n```\n\n::: {.cell-output-display}\n![](A3_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n### b. Send the codes to the TA. The first team delivering the code and chart will win a prize (by time stamp and product)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.exists(\"A3.html\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlist.files(c(\".\", \"_site\", \"docs\"), pattern = \"A3\\\\.html\", recursive = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A3.html\"      \"docs/A3.html\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.rename(\"Jing-Tao/A3.html\", \"A3.html\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.rename(\"Jing-Tao/A3.html\", \"A3.html\"): cannot rename file\n'Jing-Tao/A3.html' to 'A3.html', reason 'No such file or directory'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nif (dir.exists(\"Jing-Tao/A3_files\")) {\n  file.rename(\"Jing-Tao/A3_files\", \"A3_files\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.rename(\"Jing-Tao/A3_files\", \"A3_files\"): cannot rename file\n'Jing-Tao/A3_files' to 'A3_files', reason 'Directory not empty'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::",
    "supporting": [
      "A3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}